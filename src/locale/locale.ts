const localeSet = {
  es: {
    imagina: {
      general: {
        submit: 'Enviar',
        delete: 'Eliminar',
        remove: 'Quitar',
        restore: 'Restaurar',
        option: 'Opción',
        options: 'Opciones',
        footfall: 'Gentío',
        date: 'Fecha',
        holiday: 'Festivo',
        vacation: 'Vacación',
        name: 'Nombre',
        file: 'Archivo',
        description: 'Descripción',
        price: 'Precio',
        predice: 'Predecir',
        model: 'Modelo',
        end_date: 'Fecha final',
        start_date: 'Fecha inicial',
        min_price: 'Precio mínimo',
        max_price: 'Precio máximo',
        add: 'Agregar',
      },
      holiday: {
        date: 'Fecha festiva',
        day: 'Día festivo',
        is: 'Es festivo',
        is_not: 'No es festivo',
      },
      vacation: {
        date: 'Fecha vacacional',
        day: 'Día vacacional',
        is: 'Es vacación',
        is_not: 'No es vacación',
      },
      error: {
        api_network: 'Error de red al conectarse a la API',
        got: 'Error obtenido',
      },
      daily_capacity: {
        prediced_results: 'Resultados predichos',
        do_prediction_using: 'Realizar predición usando',
      },
      daily_sells: {
        insert_data: 'Insertar datos de predicción',
        purchase_date: 'Fecha de compra',
        event_date: 'Fecha del evento',
      },
      price_optimization: {
        insert_data: 'Inserte datos de predicción',
        select_model: 'Seleccione un modelo para usar',
      },
      training: {
        upload_model: {
          daily_capacity_model: 'Modelo para aforo diario',
          daily_sells_model: 'Modelo para ventas diarias',
          last_modification: 'Última modificación',
          model_name: 'Nombre del modelo',
          model_description: 'Descripción del modelo',
          model_file: 'Archivo del modelo',
          click_to_upload: 'Click para subir el archivo',
          add_model: 'Agregar modelo',
        },
        retraining: {
          process: 'Proceso',
          state: 'Estado',
          states: {
            running: 'Ejecutándose...',
            stopped: 'Parado',
            success: 'Finalizado bien',
            failure: 'Fallado',
          },
          start_hour: 'Hora de inicio',
          end_hour: 'Hora final',
          epochs: 'Épocas',
          epochs_of: '%{epochs} de %{epochTotal}',
          upload_new_csv_or_xlsx_data: 'Subir nuevos datos (.csv ó .xlsx)',
          from_file: 'Desde archivo',
          from_dataset: 'Desde dataset',
          test_size: 'Tamaño de muestra de prueba',
          validation_split: 'Tamaño de muestra de validación',
          model_base: 'Modelo base',
          selected_model: 'Modelos seleccionado',
          submit: 'Agregar tarea de reentrenamiento',
          working: 'Preparando...',
        },
        reports: {
          select_model: 'Seleccione un modelo para mostrar sus reportes',
          selected_model: 'Modelo seleccionado',
          available_models: 'Modelos disponibles',
          report_found: 'Encontradas %{amount} gráficas',
          graph_for: 'Gráfica para',
        },
        train: {
          layer: 'Capa',
          add_layer: 'Agregar nueva capa',
          create_model: 'Crear modelo',
          input_size: 'Cantidad de parámetros de entrada',
          neurons: 'Neuronas',
          activation_function: 'Función de activación',
          model_name: 'Nombre del modelo',
          model_description: 'Descripción del modelo',
          model_group: 'Tipo de modelo',
        },
      },
      dataset: {
        manager: {
          title: 'Administrador de dataset',
          description: 'Agrega, edita y elimina registros del dataset',
          add_element: 'Agregar un elemento',
          add_from_file: 'Agregar desde archivo',
          modal: {
            add_data: 'Agregar dato individual',
          },
        },
      },
      form: {
        error: {
          required_integer: 'Se necesita un número entero',
          require_positive_integer: 'No es un número positivo',
          required_price: 'El precio es requerido',
          required_date: 'La fecha es requerida',
          required_footfall: 'El aforo es requerido',
          required_model: 'El modelo es requerido',
          required_model_name: 'El nombre del modelo es requerido',
          required_model_group: 'El tipo de grupo es requerido',
          required_file: 'Archivo es requerido',
          required_name: 'El nombre es requerido',
          required_epochs_amount: 'La cantidad de épocas es requerido',
          required_test_size: 'Tamaño de muestra de prueba es requerido',
          required_validation_split: 'Tamaño de muestra de validación es requerido',
          required_model_base: 'El modelo base para el reentrenamiento es requerido',
          required_input_size: 'La cantidad de datos de entrada es requerido',
          required_activation_function: 'La función de activación es requerida',
          required_neurons_size: 'La cantidad de neuronas es requerido',
          required_dataset_source: 'La fuente es requerida',
          bad_file_type: 'Tipo de archivo raro',
        },
      },
    },
  },

  en: {
    imagina: {
      general: {
        submit: 'Submit',
        delete: 'Delete',
        remove: 'Remove',
        restore: 'Restore',
        option: 'Option',
        options: 'Options',
        footfall: 'Footfall',
        date: 'Date',
        holiday: 'Holiday',
        vacation: 'Vacation',
        name: 'Name',
        file: 'File',
        description: 'Description',
        price: 'Price',
        predice: 'Predice',
        model: 'Model',
        end_date: 'End date',
        start_date: 'Start date',
        min_price: 'Min price',
        max_price: 'Max price',
        add: 'Add',
      },
      holiday: {
        date: 'Holiday date',
        day: 'Holiday day',
        is: 'It is holiday',
        is_not: 'It isn\'t holiday',
      },
      vacation: {
        date: 'Vacational date',
        day: 'Vacational day',
        is: 'It is vacation',
        is_not: 'It isn\'t vacation',
      },
      error: {
        api_network: 'Network error in API connection',
        got: 'Got error',
      },
      daily_capacity: {
        prediced_results: 'Resultados predichos',
        do_prediction_using: 'Realizar predición usando',
      },
      daily_sells: {
        insert_data: 'Insert data for prediction',
        purchase_date: 'Purchase date',
        event_date: 'Event date',
      },
      price_optimization: {
        insert_data: 'Insert data for price optimization',
        select_model: 'Select the model',
      },
      training: {
        upload_model: {
          daily_capacity_model: 'Model for daily capacity',
          daily_sells_model: 'Model to daily sells',
          last_modification: 'Last modification',
          model_name: 'Model name',
          model_description: 'Model description',
          model_file: 'Model file',
          click_to_upload: 'Click to upload the file',
          add_model: 'Add model',
        },
        retraining: {
          process: 'Process',
          state: 'State',
          states: {
            running: 'Running...',
            stopped: 'Stopped',
            success: 'Success',
            failure: 'Failure',
          },
          start_hour: 'Start time',
          end_hour: 'End time',
          epochs: 'Epochs',
          epochs_of: '%{epochs} of %{epochTotal}',
          upload_new_csv_or_xlsx_data: 'Upload new file (.csv or .xlsx)',
          from_file: 'From file',
          from_dataset: 'From dataset',
          test_size: 'Test size',
          validation_split: 'Validation split',
          model_base: 'Base model',
          selected_model: 'Selected model',
          submit: 'Create task for retraining',
          working: 'Working...',
        },
        reports: {
          select_model: 'Select the model to see its reports',
          selected_model: 'Selected model',
          available_models: 'Available models',
          report_found: 'Found %{amount} graphs',
          graph_for: 'Graph for',
        },
        train: {
          layer: 'Layer',
          add_layer: 'Add new layer',
          create_model: 'Create model',
          input_size: 'Input size',
          neurons: 'Neurons',
          activation_function: 'Activation function',
          model_name: 'Model name',
          model_description: 'Model description',
          model_group: 'Model group',
        },
      },
      dataset: {
        manager: {
          title: 'Manager of dataset',
          description: 'Add, edit and delete dataset logs',
          add_element: 'Ad new element',
          add_from_file: 'Add from file',
          modal: {
            add_data: 'Add new data',
          },
        },
      },
      form: {
        error: {
          required_integer: 'Integer number is required',
          require_positive_integer: 'Positive integer is required',
          required_price: 'The price is required',
          required_date: 'The date is required',
          required_footfall: 'The capacity is required',
          required_model: 'The model is required',
          required_model_name: 'The model name is required',
          required_model_group: 'The model group is required',
          required_file: 'The file is required',
          required_name: 'The name is required',
          required_epochs_amount: 'The epoch amount is required',
          required_test_size: 'The test size is required',
          required_validation_split: 'The validation split is required',
          required_model_base: 'The base model for retrainings is required',
          required_input_size: 'The input size is required',
          required_activation_function: 'The activation function is required',
          required_neurons_size: 'The neurons size is required',
          required_dataset_source: 'The dataset source is required',
          bad_file_type: 'This file is invalid',
        },
      },
    },
  },
}

export default localeSet
